version: "3.8"

networks:
  proxy:
    driver: overlay
    attachable: true

services:
  traefik:
    image: traefik:v3.0
    command:
      # --- Providers ---
      - --providers.swarm=true
      - --providers.swarm.exposedbydefault=false
      # tell Traefik which overlay network to use to reach services
      - --providers.swarm.network=proxy_proxy

      # load dynamic routes
      - --providers.file.directory=/etc/traefik/conf
      - --providers.file.watch=true

      # (optional) for debugging
      # - --log.level=DEBUG 

      # --- Entrypoints ---
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # HTTP -> HTTPS redirect (ACME path auto-exempted)
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https

      # --- ACME / Let's Encrypt (HTTP-01) ---
      - --certificatesresolvers.le.acme.email=daniel@bitofbytes.io
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
      # (optional while testing)
      # - --certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory

      # (optional) dashboard
      - --api.dashboard=true
      - --api.insecure=true
      - --entrypoints.traefik.address=:9090

    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 9090
        published: 9090
        protocol: tcp
        mode: host

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /srv/traefik/letsencrypt:/letsencrypt
      - /srv/traefik/conf:/etc/traefik/conf:ro

    networks: [proxy]

    deploy:
      placement:
        constraints:
          - node.role == manager

  bob:
    image: 192.168.1.2:9000/bob:latest
    networks: [proxy]
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000/healthz || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
    deploy:
      replicas: 3
      labels:
        - "traefik.enable=true"

        # Serve the app on apex (HTTPS)
        - "traefik.http.routers.site.rule=Host(`bitofbytes.io`)"
        - "traefik.http.routers.site.entrypoints=websecure"
        - "traefik.http.routers.site.tls.certresolver=le"
        - "traefik.http.services.site.loadbalancer.server.port=3000"

        # Redirect HTTPS www -> apex (NOTE the $$1 to escape $)
        - "traefik.http.routers.site-www.rule=Host(`www.bitofbytes.io`)"
        - "traefik.http.routers.site-www.entrypoints=websecure"
        - "traefik.http.routers.site-www.tls.certresolver=le"
        - "traefik.http.routers.site-www.middlewares=redirect-to-apex"
        - "traefik.http.middlewares.redirect-to-apex.redirectregex.regex=^https?://www\\.bitofbytes\\.io(.*)"
        - "traefik.http.middlewares.redirect-to-apex.redirectregex.replacement=https://bitofbytes.io$$1"
        - "traefik.http.middlewares.redirect-to-apex.redirectregex.permanent=true"
